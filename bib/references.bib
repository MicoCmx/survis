@inproceedings{Association for Computing Machinery (ACM),
  abstract = {In the era of artificial intelligence (AI), generative AI, and Large Language Models (LLMs) in particular,
              have become increasingly significant in various sectors. LLMs such as GPT expand their applications,
              from content creation to advanced code completion. They offer unmatched opportunities but pose unique
              challenges to the software engineering domain. This paper discusses the necessity and urgency for software
              engineering education to adapt and evolve to prepare software engineers for the emerging LLM environment.
              While existing literature and social media have investigated AI's integration into various educational
              spheres, there is a conspicuous gap in examining the specifics of LLMs' implications for software
              engineering education. We explore the goals of software engineering education, and changes to software
              engineering, software engineering education, course pedagogy, and ethics. We argue that a holistic
              approach is needed, combining technical skills, ethical awareness, and adaptable learning strategies.
              This paper seeks to contribute to the ongoing conversation about the future of software engineering
              education, emphasizing the importance of adapting and evolving to remain in sync with rapid advancements
              in AI and LLMs. It is hoped that this exploration will provide valuable insights for educators, curriculum
              developers, and policymakers in software engineering.},
  author = {Vassilka D. Kirova and Cyril S. Ku and Joseph R Laracy and Thomas J Marlowe},
  doi = {10.1145/3626252.3630927},
  title = {Software Engineering Education Must Adapt and Evolve for an {LLM} Environment},
  year = {2024},
  isbn = {9798400704239},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3626252.3630927},
  booktitle = {Proceedings of the 55th ACM Technical Symposium on Computer Science Education V. 1},
  pages = {666–672},
  numpages = {7},
  keywords = {type:curriculum, evaluation:document, application:software engineering, chatgpt, generative ai,
              large language models (llms), responsible ai, education, software engineering, ethics},
  location = {Portland, OR, USA},
  series = {SIGCSE 2024}
}

@article{IEEE (Institute of Electrical and Electronics Engineers),
  abstract = {In the present digital era, being skilled and updated on modern software development practices has become of crucial importance for software engineering graduates. Moreover, the freelancing industry has grown immensely in recent years, and individuals, more than ever before, are fascinated by the opportunities it offers and have greater assurance that it can be a successful and satisfying alternative to regular employment. Unlike others, in the case of software, industry is leading the education. This makes Software Engineering Education (SEE) additionally responsible for minimizing the gap between the skills of the graduating students and the skills needed by the employers out there. There is not any previous work available in this that focuses on the skills required to cope with the freelancing industry by graduate students and recommendations for improvements to Pakistan higher education curriculum that help produce graduates who are capable enough to get themselves employed in freelancing platforms. This study aims to dissect the software industry needs and trends related to the freelancing industry and to uncover suggestions for training in this dynamic field. The data was extracted through different freelancing platforms using the Scrapy framework of Python, and then LDA analysis was performed on the scraped data using Python to find the most trending topics in the SE field and better analyze the situation. Using LDA analysis, the dataset extracted at two distinct time periods is investigated to describe how the software industry changes from time to time. For validity, the updated data was scraped on runtime from freelancing websites. The results of the analysis are shown in different formats, and empirical findings are discussed with reference to two different time periods and in relation to previous studies.},
  author = {Ansar Siddique and Ghosia Majeed Butt and Amina Zahid and Quadri Noorulhasan Naveed and M. Turki-Hadj Alouane},
  journal = {IEEE Access},
  title = {Analyzing Software Industry Trends to Improve Curriculum},
  year = {2024},
  volume = {12},
  number = {},
  series = {none},
  pages = {22510-22523},
  keywords = {type:evaluation, evaluation:survey, application:software engineering, Industries, Education, Market research, Employment,Outsourcing,
              Curriculum development, Software development management, Curriculum, freelancing, software industry,
              LDA model, LDA analysis, web scraping},
  doi={10.1109/ACCESS.2024.3362244}
 }

@inproceedings{IEEE,
  abstract = {The integration of Generative AI into software engineering education marks a transformative shift in teaching methodologies. This paper explores its potential, highlighting the benefits of enhancing student engagement, creativity, and efficiency while preparing them for industry challenges. Through a comprehensive analysis of 13 popular generative AI tools, we examine their roles in various software engineering tasks such as requirements analysis, design, coding, debugging, and testing. This paper contributes to the broader discourse on the future of software engineering education by offering evidence-based recommendations for leveraging generative AI to create adaptive and forward-thinking instructional strategies.},
  author = {Mounika Yabaku and Nuno Pombo and Sofia Ouhbi},
  booktitle = {2024 {IEEE} 18th International Conference on Application of Information and Communication Technologies ({AICT})},
  title = {Exploring the Potential Use of Generative {AI} in Software Engineering Education},
  year = {2024},
  volume = {},
  number = {},
  pages = {1-7},
  series = {AICT 2024},
  keywords = {type:applications, evaluation:user_study, application:software engineering, Generative AI,
              Requirements engineering, Software measurement, Usability, Software development management,
              Generative AI, Large Language Models (LLMs), Pedagogical Innovation, AIDriven Educational Tools},
  doi = {10.1109/AICT61888.2024.10740416}
}

@inproceedings{ASEW workshop at ASE 2024,
  abstract = {Human-Centric Software Engineering (HCSE) refers to the software engineering (SE) processes that put human needs and requirements as core practice throughout the software development life cycle. A large majority of software projects fail to cater to human needs and consequently run into budget, delivery, and usability issues. To support human-centric software engineering practices, it is important for universities to train their students on how to consider human needs. But what topics from HCSE should be provided in the undergraduate curriculum? This is still an open question. Curriculum guidelines for software engineering are available, however do not represent update to date considerations for how human-factors are included. In addition, curriculum approaches are not explored. To address this issue, this paper presents a scoping review to identify the topics and curriculum approaches suitable for teaching HCSE to undergraduate software engineering students. The scoping review was conducted according to the protocol by PRISMA-ScR (Preferred Reporting Items for Systematic reviews and Meta-Analyses extension for Scoping Reviews). Through PRISMA-ScR, a total of 36 conference or journal papers were identified as viable for analysis, with 5 common themes found that describe topics and curriculum approaches relevant for teaching software engineering. Using the outcomes of the scoping review, this paper also analyses the Australian Software Engineering curriculum to understand the extent at which human centred software engineering topics are scaffolded into course structures. This paper concludes by suggesting topic scaffolding for the undergraduate curriculum that aligns with the software engineering process. Overall, by providing a focus on HCSE topics and curriculum approaches, the education and awareness of HCSE among current and future software engineers can increase, leading to long-term impact on the success of software projects for all stakeholders.CCS Concepts• Software and its engineering → Software creation and management; Designing software;},
  author = {Sophie Mckenzie and Niroshinie Fernando and Imali Dias and Ben Cheng and Thuong Hoang and Xiao Liu},
  booktitle = {2024 39th IEEE/ACM International Conference on Automated Software Engineering Workshops (ASEW)},
  title = {Integrating Human-Centric Approaches into Undergraduate Software Engineering Education: A Scoping Review and Curriculum Analysis in the Australian Context},
  year = {2024},
  volume = {},
  number = {},
  pages = {100-107},
  series = {ASEW 2024},
  keywords = {type: curriculum, evaluation:case_study, application:software engineering, Education, Software, Usability,
              Software engineering, Software development management, Guidelines, Curriculum, Higher Education, Teaching and Learning},
  doi={arXiv:2407.07322}
 }

@inproceedings{IEEE ACM(ICSE-SEET),
  abstract = {Software engineering educators are continually challenged by rapidly evolving concepts, technologies, and industry demands. Due to the omnipresence of software in a digitalized society, higher education institutions (HEIs) have to educate the students such that they learn how to learn, and that they are equipped with a profound basic knowledge and with latest knowledge about modern software and system development. Since industry demands change constantly, HEIs are challenged in meeting such current and future demands in a timely manner. This paper analyzes the current state of practice in software engineering education. Specifically, we want to compare contemporary education with industrial practice to understand if frameworks, methods and practices for software and system development taught at HEIs reflect industrial practice. For this, we conducted an online survey and collected information about 67 software engineering courses. Our findings show that development approaches taught at HEIs quite closely reflect industrial practice. We also found that the choice of what process to teach is sometimes driven by the wish to make a course successful. Especially when this happens for project courses, it could be beneficial to put more emphasis on building learning sequences with other courses.},
  author = {Marco Kuhrmann and Joyce Nakatumba-Nabende and Rolf-Helge Pfeiffer and Paolo Tell and Jil Klünder and Tayana Conte},
  booktitle = {2019 IEEE/ACM 41st International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET)},
  title = {Walking Through the Method Zoo: Does Higher Education Really Meet Software Industry Demands?},
  year = {2019},
  volume = {},
  number = {},
  pages = {1-11},
  series = {ICSE-SEET 2019},
  keywords = {type:evaluation, evaluation:survey, application:software engineering, software development, software process,
              hybrid methods, survey research, education},
  doi = {10.1109/ICSE-SEET.2019.00009}
 }

@article{MDPI (Multidisciplinary Digital Publishing Institute),
  abstract = {Several approaches have been proposed to reduce the gap between software engineering education and the needs and practices of the software industry. Many of them aim to promote a more active learning attitude in students and provide them with more realistic experiences, thus recreating industry software development environments and collaborative development and, in some cases, with the involvement of companies mainly acting as potential customers. Since many degree courses typically offer separate subjects to teach requirements engineering, analysis and design, coding, or validation, the integration of all these phases normally necessitates experience in a project context and is usually carried out in a final year project. The approach described in this article benefits from the close involvement of a software house company which goes beyond the common involvement of a potential customer. Students are integrated into distributed teams comprising students, teachers and IT professionals. Teams follow the agile Scrum methodology and use the OutSystems low-code development platform providing students with the experience of an almost real scenario. The results show that this approach complements the knowledge and practice acquired in course subjects, develops the students’ technical and non-technical skills, such as commitment, teamwork, and communication, and initiates them in the methodologies and development strategies used in these companies. The feedback from the teachers involved, software companies and students was very positive.},
  author = {José Metrôlho and Fernando Ribeiro and Paula Graça and Ana Mourato and David Figueiredo and Hugo Vilarinho},
  title = {Aligning Software Engineering Teaching Strategies and Practices with Industrial Needs},
  journal = {Computation},
  volume = {10},
  year = {2022},
  number = {8},
  article-number = {129},
  url = {https://www.mdpi.com/2079-3197/10/8/129},
  ISSN = {2079-3197},
  series = {none},
  keywords={type:applications, evaluation:case_study, application:software engineering},
  doi = {10.3390/computation10080129}
}

@misc{arXiv Cornell University Open Archives Initiative,
  abstract = {The increasing adoption of Large Language Models (LLMs) in software engineering education presents both opportunities and challenges. While LLMs offer benefits such as enhanced learning experiences, automated assessments, and personalized tutoring, their integration also raises concerns about academic integrity, student over-reliance, and ethical considerations. In this study, we conducted a preliminary literature review to identify motivators and demotivators for using LLMs in software engineering education. We applied a thematic mapping process to categorize and structure these factors (motivators and demotivators), offering a comprehensive view of their impact. In total, we identified 25 motivators and 30 demotivators, which are further organized into four high-level themes. This mapping provides a structured framework for understanding the factors that influence the integration of LLMs in software engineering education, both positively and negatively. As part of a larger research project, this study serves as a feasibility assessment, laying the groundwork for future systematic literature review and empirical studies. Ultimately, this project aims to develop a framework to assist Finnish higher education institutions in effectively integrating LLMs into software engineering education while addressing potential risks and challenges.},
  author = {Maryam Khan and Muhammad Azeem Akbar and Jussi Kasurinen},
  title = {Integrating {LLMs} in Software Engineering Education: Motivators, Demotivators, and a Roadmap Towards a Framework for {Finnish} Higher Education Institutes},
  year = {2025},
  archivePrefix = {arXiv},
  eprint = {2503.22238},
  primaryClass = {cs.SE},
  howpublished = {arXiv preprint},
  series = {arXiv cs.SE},
  keywords={type:framework, evaluation:document, application:software engineering},
  url = {https://arxiv.org/abs/2503.22238}
}

@article{Elsevier（Computers & Electrical Engineering）,
  abstract = {Technological progress and its rapid evolution have positively affected the industrial sector and different productive/service sectors. One of the service-sectors that have benefited the most has been Education. In this sector, the implementation of current and emerging technologies combined with innovative pedagogical procedures and best practices is known as Education 4.0, which, in this paper, is described and mapped according to the well-known periods of the four industrial revolutions and related to higher education. Likewise, four core components of Education 4.0 to be used as a reference for the design of new projects in educational innovation are proposed (i) Competencies, (ii) Learning Methods, (iii) Information and Communication Technologies, and (iv) Infrastructure. Finally, three case studies applied to Engineering Education illustrate how the proposed components are considered in educational programs' designs.},
  author = {Jhonattan Miranda and Christelle Navarrete and Julieta Noguez and José-Martin Molina-Espinosa and María-Soledad Ramírez-Montoya and Sergio A. Navarro-Tuch and Martín-Rogelio Bustamante-Bello and José-Bernardo Rosas-Fernández and Arturo Molina},
  title = {The Core Components of {Education~4.0} in Higher Education: Three Case Studies in Engineering Education},
  journal = {Computers \& Electrical Engineering},
  volume = {93},
  pages = {107278}, % Article number
  year = {2021},
  doi = {10.1016/j.compeleceng.2021.107278},
  url = {https://www.sciencedirect.com/science/article/pii/S0045790621002603},
  issn = {0045-7906},
  series = {none},
  keywords  = {type:framework, evaluation:case_study, application:education, Education 4.0, Engineering education, Educational innovation, Higher education}
}

@article{Frontiers Media SA（Frontiers in AI）,
  abstract = {The developments in conversational AI raised urgent questions about the future direction of many aspects of society, including computing education. The first reactions to the fast-paced evolution of conversational agents were varied: Some announced “the end of programming,” while others considered this “premature obituary of programming.” Some adopted a defensive approach to detecting the use of conversational AI and avoiding an increase in plagiarism, while others questioned, “So what if ChatGPT wrote it?” Nevertheless, questions arise about whether computing education in its current form will still be relevant and fit for purpose in the era of conversational AI. Recognizing these diverse reactions to the advent of conversational AI, this paper aims to contribute to the ongoing discourse by exploring the current state through three perspectives in a dedicated literature review: adoption of conversational AI in (1) software engineering education specifically and (2) computing education in general, and (3) a comparison with software engineering practice. Our results show a gap between software engineering practice and higher education in the pace of adoption and the areas of use and generally identify preliminary research on student experience, teaching, and learning tools for software engineering.}
  author = {Cigdem Sengul and Rumyana Neykova and Giuseppe Destefanis},
  title = {Software Engineering Education in the Era of Conversational {AI}: Current Trends and Future Directions},
  journal = {Frontiers in Artificial Intelligence},
  volume = {7},
  pages = {1436350},
  year = {2024},
  doi = {10.3389/frai.2024.1436350},
  url = {https://www.frontiersin.org/articles/10.3389/frai.2024.1436350},
  series = {none},
  keywords = {type:survey, evaluation:none, application:software engineering},
  issn = {2624-8212}
}

@article{SpringerOpen（International Journal of STEM Education）,
  abstract = {As artificial intelligence (AI) technology rapidly advances, it becomes imperative to equip students with tools to navigate through the many intricate ethical considerations surrounding its development and use. Despite growing recognition of this necessity, the integration of AI ethics into higher education curricula remains limited. This paucity highlights an urgent need for comprehensive ethics education initiatives in AI, particularly for science and engineering students who are at the forefront of these innovations. Hence, this research investigates the role of an online explicit-reflective learning module in fostering science and engineering graduate students' ethical knowledge, awareness, and problem-solving skills. The study’s participants included 90 graduate students specializing in diverse science and engineering research tracks. Employing the embedded mixed-methods approach, data were collected from pre- and post-intervention questionnaires with closed-ended and open-ended questions.},
  author = {Maya Usher and Miri Barak},
  title = {Unpacking the Role of {AI} Ethics Online Education for Science and Engineering Students},
  journal = {International Journal of STEM Education},
  volume = {11},
  number = {1},
  pages = {35},
  year = {2024},
  doi = {10.1186/s40594-024-00493-4},
  url = {https://doi.org/10.1186/s40594-024-00493-4},
  series = {none},
  keywords={type:evaluation, evaluation:user_study, application:education},
  issn = {2196-7822}
}








